"""
Django settings for auction_web project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import sys
from dotenv import load_dotenv
import dj_database_url # Thêm import này

# Tìm đến file .env và đọc các biến trong đó vào môi trường
# Tệp .env nên nằm ở thư mục gốc của dự án (cùng cấp với manage.py)
BASE_DIR_ENV = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR_ENV / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'fallback_secret_key_if_not_in_env_but_please_set_it') # Nên có giá trị fallback an toàn hơn hoặc raise error

# SECURITY WARNING: don't run with debug turned on in production!
# Giá trị 'False' (chuỗi) sẽ là False. 'True' (chuỗi) sẽ là True.
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# --- ALLOWED_HOSTS ---
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'auctionhub.uk', 'www.auctionhub.uk', 'auctionhub-theta.vercel.app']

PRODUCTION_HOST = ['auctionhub.uk', 'www.auctionhub.uk']

# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    'django.contrib.sitemaps',  # Thêm sitemaps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'corsheaders',

    # Ứng dụng bên thứ ba
    'rest_framework',
    'rest_framework_simplejwt',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'channels',

    # Ứng dụng của project
    'apps.auth_users.apps.AuthUsersConfig',
    'apps.items.apps.ItemsConfig',
    'apps.bidding.apps.BiddingConfig',
    'apps.payments.apps.PaymentsConfig',
    'apps.reviews.apps.ReviewsConfig',
    'apps.wallet.apps.WalletConfig',
    'apps.sim.apps.SimConfig',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware', # Đặt ở đầu tiên sau SecurityMiddleware là tốt nhất
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Thường đặt trước CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # Đã có ở trên, xóa dòng này
]

ROOT_URLCONF = 'auction_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'auction_web/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auction_web.wsgi.application'
ASGI_APPLICATION = 'auction_web.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Cấu hình mặc định cho local development nếu DATABASE_URL không được đặt
LOCAL_DB_ENGINE = 'django.db.backends.postgresql'
LOCAL_DB_NAME = os.getenv('DB_NAME', 'auctiondb_local_fallback')
LOCAL_DB_USER = os.getenv('DB_USER', 'auction_local_user')
LOCAL_DB_PASSWORD = os.getenv('DB_PASSWORD', 'local_password')
LOCAL_DB_HOST = os.getenv('DB_HOST', 'localhost')
LOCAL_DB_PORT = os.getenv('DB_PORT', '5432')

DATABASES = {
    'default': {
        'ENGINE': LOCAL_DB_ENGINE,
        'NAME': LOCAL_DB_NAME,
        'USER': LOCAL_DB_USER,
        'PASSWORD': LOCAL_DB_PASSWORD,
        'HOST': LOCAL_DB_HOST,
        'PORT': LOCAL_DB_PORT,
    }
}

# Ghi đè bằng DATABASE_URL nếu nó tồn tại (cho Vercel và có thể cả local)
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600, # Thời gian kết nối được giữ (giây)
        conn_health_checks=True, # Kiểm tra sức khỏe kết nối
    )


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer", # OK cho development và Vercel (serverless)
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Ho_Chi_Minh'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' # Luôn có dấu / ở cuối
STATICFILES_DIRS = [
    BASE_DIR / 'auction_web/static',
]

STATIC_ROOT = BASE_DIR / "staticfiles_build" / "static"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'auth_users.User'

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') # Sử dụng mật khẩu ứng dụng

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True, 
    'BLACKLIST_AFTER_ROTATION': True,
}

ACCOUNT_FORMS = {'signup': 'apps.auth_users.forms.CustomSignupForm'}
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1 # Cần thiết cho django-allauth và django.contrib.sites

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Đăng nhập bằng email
ACCOUNT_EMAIL_REQUIRED = True # Email là bắt buộc
ACCOUNT_UNIQUE_EMAIL = True # Email phải là duy nhất
ACCOUNT_EMAIL_VERIFICATION = os.getenv('ACCOUNT_EMAIL_VERIFICATION', "mandatory") # "mandatory", "optional", hoặc "none"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True # Tự động đăng nhập sau khi xác thực email
ACCOUNT_USERNAME_REQUIRED = False


LOGIN_REDIRECT_URL = os.getenv('LOGIN_REDIRECT_URL', "/")
LOGOUT_REDIRECT_URL = os.getenv('LOGOUT_REDIRECT_URL', "/")

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    }
}
# Chỉ load provider nếu có client_id và secret
if not (os.getenv('GOOGLE_CLIENT_ID') and os.getenv('GOOGLE_CLIENT_SECRET')):
    SOCIALACCOUNT_PROVIDERS.pop('google', None)


# VietQR API Configuration
VIETQR_CLIENT_ID = os.getenv("VIETQR_CLIENT_ID")
VIETQR_API_KEY = os.getenv("VIETQR_API_KEY")
VIETQR_GENERATE_API_URL = "https://api.vietqr.io/v2/generate"

WEBSITE_BANK_ACCOUNT_NO = os.getenv("WEBSITE_BANK_ACCOUNT_NO")
WEBSITE_BANK_ACCOUNT_NAME = os.getenv("WEBSITE_BANK_ACCOUNT_NAME")
WEBSITE_BANK_ACQ_ID = os.getenv("WEBSITE_BANK_ACQ_ID")


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO' if not DEBUG else 'DEBUG', # Log INFO trở lên ở production
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}